#!/usr/bin/python3
#Importing Libaries:

import os, re, argparse, subprocess, requests, requests.exceptions, time, ftplib, sys
import dns.resolver
import dns.zone
import dns.query
from termcolor import colored
from bs4 import BeautifulSoup
from urllib.parse import urlparse

#Defining basic-Variables & Functions:

exitmsg = colored('[-]Exiting...', 'red', attrs=['bold'])
pos = colored("[+] ","green", attrs=['bold'])
neg = colored("[-] ","red", attrs=['bold'])
loading = colored("*","yellow", attrs=['bold'])
askdata = colored("!","yellow", attrs=['bold'])

Yn = colored("[Y/n]: ", attrs=['bold'])
yN = colored("[y/N]: ", attrs=['bold'])

info = "\033[37m[\033[1m\033[32mInfo\033[0m\033[37m]\033[0m "
warn = "\033[37m[\033[1m\033[33mWARNING\033[0m\033[37m]\033[0m "
error = "\033[37m[\033[1m\033[31mERROR\033[0m\033[37m]\033[0m "
success = "\033[37m[\033[1m\033[32mSUCCESS\033[0m\033[37m]\033[0m "
input_required = "\033[37m[\033[1m\033[34mINPUT REQUIRED\033[0m\033[37m]\033[0m "
portenum = "\033[37m[\033[1m\033[32mInfo\033[0m\033[37m]\033[0m "


def gt(gtext):
    print("\n\033[32m"+"\033[38;5;154m# " + gtext + "\033[0m\n")

def blgt(blgttext):
    return "\033[92;1m" + blgttext + "\033[0m"

def portenum(enumtext):
    return "\n"+"\033[37m[\033[1m\033[33m" + enumtext + "\033[0m\033[37m]\033[0m "

#Taking Main input and args

parser = argparse.ArgumentParser()
parser.add_argument("-t", "--target", help="Target Here, -t example.com", required="-v" not in sys.argv)

args = parser.parse_args()

# Cleaning Target and Validating it:

obtarget = args.target
target = re.sub(r'^https?://', '', obtarget)

if not target:
    print("Only IP or Domain allowed as target")
    quit()

ip_pattern = re.compile(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')
domain_pattern = re.compile(r'^(([a-zA-Z0-9]+\.)+[a-zA-Z]{2,})$')

# For Detail params:

if re.match(ip_pattern, target):
    print(f"{info}Detected as IP")
    domain = False
    dnsoption="-n"
elif re.match(domain_pattern, target):
    print(f"{info}Detected as Domain/hostname")
    domain = True
else:
    print(f"{error}Only IP or Domain allowed as target, Remove any '/' etc from end, IPv6 not supported either")
    quit()

# Creating Folders for result:

current_path = os.getcwd()

parent_folder = "box"
main_folder = target

folder_path = parent_folder+"/"+main_folder

def create_files_folder():

    if os.path.exists(folder_path):
        # Folder already exists, prompt user to run scan
        user_input = input(f"{input_required}Folder already exists. Do you want to run a scan on the application again? Existing results will be overwritten {yN} ")
        if user_input.lower() == "y":
            pass
        else:
            print("Aborted")
            exit()
    else:
        # Folder doesn't exist, do nothing
        pass


    folders = ['scans', 'exploits', 'assets', 'report']

    for folder in folders:
        os.makedirs(os.path.join(parent_folder, main_folder, folder), exist_ok=True)

    vector_file = os.path.join(parent_folder, main_folder, "assets", "vector.txt")
    hash_file = os.path.join(parent_folder, main_folder, "assets", "hash.txt")
    requestfile = os.path.join(parent_folder, main_folder, "assets","req.txt")

    if not os.path.exists(vector_file):
        with open(vector_file, "w") as f:
            f.write("# Store Vectors & Endpoints Here:\n")

    if not os.path.exists(hash_file):
        with open(hash_file, "w") as f:
            pass

    if not os.path.exists(requestfile):
        with open(requestfile, "w") as f:
            pass

rpath = os.path.join(parent_folder, target, "scans")

# Nmap

def nmap():
    print(f'{info}Starting {blgt("nmap")} scan against {target}')

    nmap_command = f"nmap -sT -T4 -Pn -n -oN {rpath}/fast-all-tcp.nmap {target} --max-retries 1 --unprivileged -vv"
    gt(nmap_command)
    subprocess.run(nmap_command, shell=True, check=True)

    print(f'\n{info}Starting In-Depth Scan on open ports scan against {target}')

    nmap_deep_command = f"cat "+rpath+"/fast-all-tcp.nmap | grep -e open | awk -F '/tcp' '{print $1}' > ./"+parent_folder+"/"+target+"/scans/portlist.txt && nmap -A -T4 -sC -sV -Pn -n -p $(tr '\n' ',' < ./"+parent_folder+"/"+target+"/scans/portlist.txt)  "+target+" -oN ./"+parent_folder+"/"+target+"/scans/long-scan.nmap"
    gt(nmap_deep_command.replace("\n", r"\n"))
    subprocess.run(nmap_deep_command, shell=True, check=True)

    # Delete portlist.txt:

    portlist_path = os.path.join(parent_folder, target, "scans", "portlist.txt")
    try:
        os.remove(portlist_path)
        pass
    except FileNotFoundError:
        print("File not found.")
    except Exception as e:
        print(f"An error occurred: {e}")


# Domain Enumeration

def DomainEnumeration():

    # Subdomain Enumeration:

    print(f"{info}Performing vhost Subdomain Enumeration")

    def run_command(command):
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()
        return output.decode("utf-8")
    command = f"gobuster vhost -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt --append-domain -u {target} -o {rpath}/subdomains.txt"
    gt(command)
    result = run_command(command)
    print(f"{info}Subdomains found:")
    print(result)

    # Testing ZoneTransfer Attack:

    print(f"{info}Performing Zonetransfer attack:\n")

    ns_records = None  # initialize the variable

    try:
        ns_records = dns.resolver.resolve(target, 'NS')
    except dns.resolver.NXDOMAIN:
        print(f"{neg}DNS resolution failed for {target}")

    if ns_records:  # check if ns_records is not None
        for ns in ns_records:
            ns = str(ns)

        try:
            # Resolve the IPv4 and IPv6 addresses for the NS record
            ipv4_ns = dns.resolver.resolve(ns, 'A')[0].address
        except dns.resolver.NoAnswer:
            ipv4_ns = None

        try:
            ipv6_ns = dns.resolver.resolve(ns, 'AAAA')[0].address
        except dns.resolver.NoAnswer:
            ipv6_ns = None

        # Try to perform a zone transfer from the NS record's IPv4 and IPv6 addresses
        for ns_ip in [ipv4_ns, ipv6_ns]:
            if ns_ip:
                try:
                    zone = dns.zone.from_xfr(dns.query.xfr(ns_ip, target))
                    print("\n" + "=" * 80)
                    print(f"{pos}Zone transfer successful from {ns} ({ns_ip})")
                    print("=" * 80 + "\n")
                    for name in zone:
                        print(zone[name].to_text(name))
                except:
                    print(f"\n{pos}Zone transfer failed for {ns} ({ns_ip})\n")

        # Print an error message if both IPv4 and IPv6 addresses were unable to be resolved
        if not ipv4_ns and not ipv6_ns:
            print(f"[-] Unable to resolve IP address for {ns}")
    print("\n")

def EnumerateAllPorts():

    services = {
        'ftp': ftpenum,
        'ssh': sshenum,
        'telnet': telnetenum,
        'smtp': smtpenum,
        'dns': dnsenum,
        'imap': imapenum,
        'http': httpenum,
        'http-proxy': httpenum,
        'ssl': httpsenum,
        'https': httpsenum,
        'http-alt': httpenum,
        'http-proxy-url': httpenum,
        'http-mgmt': httpenum,
        'pop3': pop3enum,
        'pop3s': pop3enum,
        'imap3': imapenum,
        'imap4': imapenum,
        'netbios-ssn': smbenum,
        'microsoft-ds': smbenum,
        'mysql': mysqlenum,
        # 'postgresql': postgresenum,
        # 'mssql': mssqlenum,
        # 'oracle': oracleenum,
        'ftp-data': ftpenum,
        'smtps': smtpenum,
        'smtp-submission': smtpenum,
        # 'rpcbind': rpcbindenum,
        'smb': smbenum,
        'samba': smbenum,
        'https-alt': httpsenum,
        'imaps': imapenum,
        'pop3p': pop3enum,
        # 'rdp': rdpenum,
        # 'vnc': vncenum,
        'nfs': check_nfs,
        'nfs_acl': check_nfs,
        'cifs': smbenum,
        'http-tunnel': httpenum,
        # 'ldap': ldapenum,
        # 'ldaps': ldapenum,
        # 'redis': redisenum,
        'mongodb': mongodbenum,
        'ftp-control': ftpenum,
        'whois': whoisenum,
        'mysql-proxy': mysqlenum,
        'smtp-ndr': smtpenum,
        'smtps': smtpenum,
        'ssh': sshenum,
        'ssl/http': httpsenum,
        'ssh-keyexchange': sshenum,
        'imap': imapenum,
        'poppassd': pop3enum,
        'nfsd': check_nfs,
        # 'ldap2': ldapenum,
        # 'ldap3': ldapenum,
        'www': httpenum,
        # 'exec': execenum,
        # 'login': loginenum,
        # 'shell': shellenum,
        # 'printer': printerenum,
        # 'rsync': rsyncenum,
        'tcpwrapped': genericenum,
        'unknown': genericenum
    }

    print(f'{info}Starting Automated port enumeration on identified ports\n') 

    # Enumerating Identified services:
    with open(f'{rpath}/fast-all-tcp.nmap', 'r') as f:
        contents = f.read()

    pattern = r'^(\d+)/tcp\s+open\s+([\w-]+).*$'

    for line in contents.splitlines():
        match = re.match(pattern, line, re.IGNORECASE)
        if match:
            port = int(match.group(1))
            service = match.group(2).lower()
            if service in services:
                services[service](port)

def mongodbenum(port):
    print(f'{portenum(f"MONGODB:{port}")}Enumerating WHOIS\n')

    command = f'nmap -sV --script "mongo* and default" {target} -p {port} -oN ./{rpath}/mongodb-{port}.txt'
    os.system(command)

def whoisenum(port):
    print(f'{portenum(f"WHOIS:{port}")}WHOIS\n')

    whois = f'whois {target} | tee ./{rpath}/whois-{port}.txt'
    os.system(whois)

def ftpenum(port):
    print(f'{portenum(f"FTP:{port}")}Enumerating FTP\n')

    ftp = ftplib.FTP()
    ftp.connect(target, port)

    # Test for anonymous login
    try:
        ftp.login()
        print(f'{pos}Anonymous login allowed')
    except ftplib.error_perm as e:
        print(f'{neg}Anonymous login not allowed')
        ftp.quit()
        return

    # Perform additional tests that don't require login credentials
    # Test for directory traversal vulnerability
    try:
        ftp.cwd('../')
        print(f'{pos}Directory traversal vulnerability found')
    except ftplib.error_perm:
        print(f'{neg}Directory traversal vulnerability not found')

    # Test for weak credentials
    for user in ['admin', 'root', 'test']:
        for password in ['password', '123456', 'admin']:
            try:
                ftp.login(user, password)
                print(pos + 'Weak credentials found: {}:{}'.format(user, password))
            except ftplib.error_perm:
                pass

    # Test for upload and download capabilities
    try:
        # Upload a test file
        with open('test.txt', 'w') as f:
            f.write('Test file')
        ftp.storlines('STOR test.txt', open('test.txt', 'rb'))

        # Download the test file
        with open('test.txt', 'wb') as f:
            ftp.retrbinary('RETR test.txt', f.write)

        print(f'{pos}Upload and download capabilities confirmed')
    except ftplib.error_perm:
        print(f'{neg}Upload and download capabilities not confirmed')
    finally:
        # Delete the test file from FTP server
        try:
            ftp.delete('test.txt')
        except ftplib.error_perm:
            pass

    # Delete file from your directory
    try:
        os.remove('test.txt')
    except:
        pass

    # Close the connection
    ftp.quit()


def pop3enum(port):
    command = f'nmap --script "pop3-capabilities or pop3-ntlm-info" -sV -port {port} {target} -oN ./{rpath}/pop3-{port}.txt'
    os.system(command)

def sshenum(port):
    print(f'{portenum(f"SSH:{port}")}Enumerating SSH')
    command = f"./tools/ssh-audit/ssh-audit.py {target} --port={port} -n | tee ./{rpath}/ssh-audit-{port}.txt"
    gt(f'{command}')
    os.system(command)

def telnetenum(port):
    print(f'{portenum(f"TELNET:{port}")}Enumerating Telnet')
    command = f'nmap -n -sV -Pn --script "*telnet* and safe" -p {port} {target} -oN ./{rpath}/telnet-{port}.txt'
    gt(f'{command}')
    os.system(command)

# Smtp
def smtpenum(port):
    print(f'{portenum(f"SMTP:{port}")}Enumerating SMTP')
    command = f'nmap -Pn --script=smtp-commands,smtp-enum-users,smtp-vuln-cve2010-4344,smtp-vuln-cve2011-1720,smtp-vuln-cve2011-1764 -p {port} {target} -oN ./{rpath}/smtp-{port}.txt'
    gt(f'{command}')
    os.system(command)    

# DNS
def dnsenum(port):
    print(f'{portenum(f"DNS:{port}")}Enumerating DNS')
    command = f'nmap -Pn --script --script="(*dns* and (default or (discovery and safe))) or dns-random-txid or dns-random-srcport" -p {port} {target} -oN ./{rpath}/smtp_commands-{port}.txt'
    gt(f'{command}')
    os.system(command)  

# httpenum
def httpenum(port):

    rwebpath = f"{rpath}/HTTP-{port}"
    os.mkdir(rwebpath)

    def run_whatcurl_command(command):
        try:
            result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            return result.stdout.decode("utf-8")
        except Exception as e:
            return f"Error: {e}"

    curl_command = f"curl -I -s -k {target}:{port} | tee ./{rwebpath}/curl-{port}.txt"
    whatweb_command = f"whatweb -a 3 {target}:{port} | tee ./{rwebpath}/whatweb-{port}.txt"

    print(f'{portenum(f"HTTP:{port}")}Checking Response Headers:')
    gt(f'{curl_command}')
    print(run_whatcurl_command(curl_command))

    print(f'{portenum(f"HTTP:{port}")}Checking for Web Technologies:')
    gt(f'{whatweb_command}')
    print(run_whatcurl_command(whatweb_command))

    # Remove color from whatweb file:
    run_whatcurl_command(f"sed -i 's/\x1b\[[0-9;]*m//g' ./{rwebpath}/whatweb-{port}.txt")

    print(f'{portenum(f"HTTP:{port}")}Files that may contain more urls:\n')

    def get_url_status(file):
        url = f"{target}:{port}/{file}"
        response = subprocess.run(f"curl -s -o /dev/null -w '%{{http_code}}' {url}", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        status_code = response.stdout.decode("utf-8").strip()
        color = "\033[0m"
        if status_code.startswith("2"):
            color = "\033[32m"  # green color for 2xx status code
        elif status_code.startswith("4"):
            color = "\033[35m"  # purple color for 4xx status code
        return f"{pos}{target}:{port}/{file} exists [{color}{status_code}\033[0m]" if color == "\033[32m" else f"{pos}{target}/{file} doesn't exist [{color}{status_code}\033[0m]"

    print(get_url_status("robots.txt"))
    print(get_url_status("sitemap.xml"))

    # feroxbuster

    print(f'{portenum(f"HTTP:{port}")}Dirsearch')
    dirsearch_command = f"feroxbuster -u http://{target}:{port} -o {current_path}/{rpath}/urls-{port}.txt"
    gt(f'{dirsearch_command}')
    os.system(dirsearch_command)

    # Finding Tokens, links etc

    print(f'{portenum(f"HTTP:{port}")}Extracting tokens, secret keys, useful links target:')
    linkfinder_cmd = f"python3 ./tools/linkfinder.py -i http://{target}:{port} -d -o cli | tee ./{rwebpath}/links-{port}.txt"
    gt(f'{linkfinder_cmd}')
    os.system(linkfinder_cmd)

    secretfinder_cmd = f"python3 ./tools/SecretFinder.py -i http://{target}:{port} -e -o ./{rwebpath}/SecretFinder-{port}.html"
    gt(f'{secretfinder_cmd}')
    os.system(secretfinder_cmd)

    # ParamSpider:

    # print(f'{portenum(f"HTTP:{port}")}Finding parameters, Output wont be displayed since it can be huge:')
    # paramspider = f"python3 ./tools/paramspider/paramspider.py --quiet --domain {target}:{port} --exclude woff,css,js,png,svg,jpg -o ./{rpath}/Parameters-{port}.txt"
    # gt(f'{paramspider}')
    # os.system(paramspider)

    print(f'{portenum(f"HTTP:{port}")}Testing HTTP Methods')
    nmap_httptesting = f"nmap -p{port} -sV --script http-method-tamper {target} -oN ./{rwebpath}/HTTP_Methods-{port}.txt"
    gt(f'{nmap_httptesting}')
    os.system(nmap_httptesting)

# SSL/HTTPS:

def httpsenum(port):
    print(f'{portenum(f"SSL/HTTPS:{port}")}Scanning for ssl/https vulnerbilities')
    sslscan = f"sslscan --no-colour {target}:{port} | tee ./{rpath}/sslscan-{port}.txt"
    gt(f'{sslscan}')
    os.system(sslscan)

# SMB:
def smbenum(port):

    smbclient_file = f"{rpath}/smbclient.txt"

    print(f'{portenum(f"SMB:{port}")}')

    if not os.path.exists(smbclient_file):

        command = f"smbclient --no-pass -L ////{target}// | tee {rpath}/smbclient.txt"
        subprocess.run(command, shell=True, input='\n', encoding='ascii')

        gt(f'{command}')
        os.system(command)
    else:
        print(f"The file {smbclient_file} already exists. Skipping command execution.")


# IMAP

def imapenum(port):
    print(f'{portenum(f"IMAP:{port}Enumerating IMAP")} {target} ')
    command = f'nmap -Pn --script "imap* and default" -sV -p {port} {target} -oN ./{rpath}/imap-{port}.txt'
    gt(f'{command}')
    os.system(command)  

# MYSQL:

def mysqlenum(port):
    print(f'{portenum(f"MYSQL:{port}")}Try mysql -h {target} -u root sometimes its allowed')
    def run_mysql_command(command):
        try:
            result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            return result.stdout.decode("utf-8")
        except Exception as e:
            return f"Error: {e}"

    nmap_mysql_command = f"nmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables | tee ./{rpath}/mysql-nmap-scripts-{port}.txt"

    print(f'{portenum(f"MYSQL:{port}")}Testing detailed nmap scripts againset mysql')
    gt(f'{nmap_mysql_command}')
    print(run_mysql_command(nmap_mysql_command))

# RPCBIND

def rpcbindenum(port):
    output_file = f"./{rpath}/rpcinfo_output.txt"
    command = f"rpcinfo -p {target} | tee {output_file}"
    print(f'{portenum(f"RPCBIND:{port}")}rpcinfo result:')
    gt(f'{command}')
    subprocess.run(command, shell=True)
    with open(output_file, "r") as f:
        output = f.read()
    return output

nfsoutput_file = f'./{rpath}/showmount-rpcbind.txt'
nfs_output_generated = False

def check_nfs(port):
    global nfs_output_generated
    print(f'{portenum(f"NFS:{port}")}Listing all mounts:')

    if not nfs_output_generated:
        command = f"showmount -e {target} | tee {nfsoutput_file}"
        gt(f'{command}')
        subprocess.run(command, shell=True)
        nfs_output_generated = True
    else:
        print(f"Skipping showmount as output file since {nfsoutput_file} has already been generated.")

def check_rpcnfs(port):
    global nfs_output_generated
    print(f'{portenum(f"RPCBIND:{port}")}Checking rpcinfo:')
    
    rpc_file = f"./{rpath}/rpcinfo_output.txt"

    if os.path.exists(rpc_file):
        with open(rpc_file, "r") as f:
            output = f.readlines()
        for line in output:
            if "nfs" in line or "nfs_acl" in line:
                print(f"{target} has an NFS share")
                if not nfs_output_generated:
                    command = f"showmount -e {target} | tee {nfsoutput_file}"
                    gt(f'{command}')
                    subprocess.run(command, shell=True)
                    nfs_output_generated = True
                else:
                    print(f"Skipping showmount as output file {nfsoutput_file} has already been generated.")
                with open(nfsoutput_file, "r") as f:
                    output = f.read()
                return output
                break
        else:
            print(f"{target} does not have an NFS share based on rpcbind output.")
    else:
        print(f"{rpc_file} not found, please try again and check if output files are working correctly")

def genericenum(port):
    print(f'{portenum(f"(unknown):{port}")} Nmap on port:')

    # Basic enumeration commands
    os.system(f"nmap -sV -sC -Pn -p {port} -oN {parent_folder}/{main_folder}/scans/unknown-{port}.nmap {target}")

##############
##EXECUTIONS##
##############

try:
    start_time = time.time()

    create_files_folder()
    nmap()
    if domain:
        DomainEnumeration()
    EnumerateAllPorts()

    end_time = time.time()

    elapsed_time = end_time - start_time
    minutes, seconds = divmod(elapsed_time, 60)
    seconds = round(seconds)
    if seconds == 60:
        minutes += 1
        seconds = 0

    print(f"\n\n")
    print(f"{info}All Results are successfully saved in current directory at \033[1m{rpath}\033[0m")
    print(f"{info}Scan finished in {int(minutes):02d}:{seconds:02d}")


except KeyboardInterrupt:
    print(colored(f"\n{error}User Interrepted","red", attrs=['bold']))
    raise SystemExit
